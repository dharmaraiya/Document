Domain Specific language
windows RM for Windows connection

#####################################################
Ansible Installation
1. Create a new file called 'ansible.repo' in cd /etc/yum.repos.d
vi ansible.repo

2. Copy the following content into it:

[Ansible]
name = ansible
baseurl = https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/
enabled = 1
gpgcheck = 0 
3. Run 'yum update' 
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum -y install ansible
ansible --version

##############################################################
[root@ip-172-31-39-233 yum.repos.d]# 
Go To
cd /etc/ansible and vi hosts

go to end 
insert [server]
add your second instance pribate IP

[server]
172.1.1.1 ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/server1.pem

[root@ip-172-31-39-233 .ssh]# ansible SERVERS -m raw -a "uptime"

Note :  check name case sensitive
hostname linux or centos

[root@ip-172-31-39-233 .ssh]# ansible SERVERS -m raw -a "yum update -y"
172.31.35.123 | FAILED | rc=1 >>
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
You need to be root to perform this command.
Shared connection to 172.31.35.123 closed.
non-zero return code

[root@ip-172-31-39-233 .ssh]# ansible SERVERS --sudo -m raw -a "yum update -y"
[root@ip-172-31-39-233 .ssh]# ps -ef | grep -i yum   #this needs to check and troubleshoot
root     15146  3439  0 05:18 pts/0    00:00:00 grep --color=auto -i yum


====================================

[root@ip-172-31-39-233 .ssh]# mkdir -p /opt/ansible-demo && cd /opt/ansible-demo
[root@ip-172-31-39-233 ansible-demo]# vi install-http.yaml

#install-http.yaml  create
---
- hosts: SERVERS

  tasks:
    - name: installing httpd
      yum: pkg=httpd state=installed
      become: true



[root@ip-172-31-39-233 ansible-demo]# ansible-playbook install-http.yaml -vv
# -vv  meaning verbose in detail explanation

OUtput Learn:
changed: [172.31.35.123] => {"changed": true, "msg": "", "rc": 0, "results": 
PLAY RECAP *******************************************************************************************************************************************
172.31.35.123              : ok=2    changed=1    unreachable=0    failed=0   


Modify file again
---
- hosts: SERVERS
  gather_facts: no
  tasks:
    - name: installing httpd
      yum: pkg=httpd state=installed
      become: true
=========================================

#to start httpd on second machine

---
- hosts: SERVERS
  gather_facts: no
  tasks:
    - name: installing httpd
      yum: pkg=httpd state=installed
      become: true      
        
    - name: start httpd service
      service: name-httpd state=started
      become: true
~                       


===========================

---
- hosts: SERVERS

  tasks:
    - name: copy authorizedkey
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
      become: true


# now check to second machine for Authorized keys file

==============================================

[root@ip-172-31-39-233 opt]# 


---
- hosts: SERVERS  #group name from the inventory
  user: ec2-user
  sudo: true
  
  vars:
    pack_name: httpd
    
  vars_files:
    - web_vars.yml
  
  tasks:
    - name: Install {{ pack_name }}
      yum: pkg={{ pack_name }} state=installed
    - name: Start {{ serv_name }}
      service: name={{ serv_name }} state=started
...

===================================


Creating EC2 Instance from Ansible 

Craate root keys from IAM

-------------------Ansible aws----------------------------
- name: Create a new Demo EC2 instance
  hosts: localhost
  gather_facts: False

  vars:
      region: us-east-1
      instance_type: t2.micro
      ami: ami-26ebbc5c  # Redhat
      keypair: pk-key # pem file name

  tasks:

    - name: Create an ec2 instance
      ec2:
         key_name: "{{ keypair }}"
         aws_access_key: "AKIAJKCHVVFVMFG7KMNA"
         aws_secret_key: "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"
         group: Kubectl  # security group name
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1  # default
         count_tag:
            Name: "Demo"
         instance_tags:
            Name: "Demo"
         vpc_subnet_id: "subnet-4303836c"
         assign_public_ip: yes
      register: ec2
    
    - debug:
        msg: "{{ item['private_ip'] }}"
      with_items: "{{ ec2.instances }}"

    - set_fact: ip_list= "[]"
   
    - name: Construct IP list
      set_fact: ip_list= "{{ ip_list }} + ['{{ item.private_ip }}']"
      with_items: "{{ ec2.instances }}"
 
    - debug:
        msg: "{{ ip_list }}"

   
    - name: Add all web instance IPs to host group
      add_host: hostname={{ item.public_ip }} groupname=webservers
      with_items: '{{ ec2.instances }}'

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ ec2.instances }}'
       
===============

Testing:

[root@ip-172-31-39-233 ansible-demo]# ansible-playbook ec2create.yaml 

PLAY [Create a new Demo EC2 instance] ****************************************************************************************************************

TASK [Create an ec2 instance] ************************************************************************************************************************
fatal: [localhost]: FAILED! => {"changed": false, "msg": "boto required for this module"}
	to retry, use: --limit @/opt/ansible-demo/ec2create.retry

PLAY RECAP *******************************************************************************************************************************************
localhost                  : ok=0    changed=0    unreachable=0    failed=1   

==================


Install Boto first

pip install --upgrade pip

pip install boto boto3

sudo yum install wget
wget https://bootstrap.pypa.io/get-pip.py
sudo yum install gcc libffi-devel python-devel openssl-devel
sudo python get-pip.py
sudo pip install boto

Note : if any security groups error comes you can use default group

Path: /opt/ansible-demo

==============================================

GitHub :  https://github.com/maheshkharwadkar/devops/blob/master/ansible/firstplaybook/roles/tomcat/tasks/install_packages.yml

cd /opt/ansible-demo

git clone https://github.com/maheshkharwadkar/devops.git
cd devops/ansible/e2eproject
cd roles/tomcat_aws/
vi defaults/main.yml
vi tasks/aws-ec2.yml
ansible-playbook deploy.yml

check ansile.cfg
[root@ip-172-31-39-233 e2eproject]# vi ansible.cfg   #check server1.pem from .ssh

go to deploy.ymp and comment out copy task

Installation window:
===================================================================
[root@ip-172-31-39-233 e2eproject]# vi deploy.yml 
[root@ip-172-31-39-233 e2eproject]# ansible-playbook deploy.yml 

PLAY [Create tomcat AWS infrastructure] ****************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [tomcat_aws : Create an ec2 instance] *************************************
changed: [localhost]

TASK [tomcat_aws : debug] ******************************************************
ok: [localhost] => (item={u'ramdisk': None, u'kernel': None, u'root_device_type': u'ebs', u'private_dns_name': u'ip-172-31-33-6.us-east-2.compute.internal', u'block_device_mapping': {u'/dev/xvda': {u'status': u'attached', u'delete_on_termination': True, u'volume_id': u'vol-036f1a15e5f51ceca'}}, u'key_name': u'devops', u'public_ip': u'18.220.168.42', u'image_id': u'ami-04328208f4f0cf1fe', u'tenancy': u'default', u'private_ip': u'172.31.33.6', u'groups': {u'sg-0cba9b85caa96ef78': u'launch-wizard-3'}, u'public_dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'state_code': 16, u'id': u'i-0a3f0819689aabd5c', u'tags': {u'Name': u'Demo'}, u'placement': u'us-east-2c', u'ami_launch_index': u'0', u'dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'region': u'us-east-2', u'ebs_optimized': False, u'launch_time': u'2019-04-14T05:32:05.000Z', u'instance_type': u't2.micro', u'state': u'running', u'architecture': u'x86_64', u'hypervisor': u'xen', u'virtualization_type': u'hvm', u'root_device_name': u'/dev/xvda'}) => {
    "msg": "172.31.33.6"
}

TASK [tomcat_aws : Add all web instance IPs to host group] *********************
changed: [localhost] => (item={u'ramdisk': None, u'kernel': None, u'root_device_type': u'ebs', u'private_dns_name': u'ip-172-31-33-6.us-east-2.compute.internal', u'block_device_mapping': {u'/dev/xvda': {u'status': u'attached', u'delete_on_termination': True, u'volume_id': u'vol-036f1a15e5f51ceca'}}, u'key_name': u'devops', u'public_ip': u'18.220.168.42', u'image_id': u'ami-04328208f4f0cf1fe', u'tenancy': u'default', u'private_ip': u'172.31.33.6', u'groups': {u'sg-0cba9b85caa96ef78': u'launch-wizard-3'}, u'public_dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'state_code': 16, u'id': u'i-0a3f0819689aabd5c', u'tags': {u'Name': u'Demo'}, u'placement': u'us-east-2c', u'ami_launch_index': u'0', u'dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'region': u'us-east-2', u'ebs_optimized': False, u'launch_time': u'2019-04-14T05:32:05.000Z', u'instance_type': u't2.micro', u'state': u'running', u'architecture': u'x86_64', u'hypervisor': u'xen', u'virtualization_type': u'hvm', u'root_device_name': u'/dev/xvda'})

TASK [tomcat_aws : Wait for SSH to come up] ************************************
ok: [localhost] => (item={u'ramdisk': None, u'kernel': None, u'root_device_type': u'ebs', u'private_dns_name': u'ip-172-31-33-6.us-east-2.compute.internal', u'block_device_mapping': {u'/dev/xvda': {u'status': u'attached', u'delete_on_termination': True, u'volume_id': u'vol-036f1a15e5f51ceca'}}, u'key_name': u'devops', u'public_ip': u'18.220.168.42', u'image_id': u'ami-04328208f4f0cf1fe', u'tenancy': u'default', u'private_ip': u'172.31.33.6', u'groups': {u'sg-0cba9b85caa96ef78': u'launch-wizard-3'}, u'public_dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'state_code': 16, u'id': u'i-0a3f0819689aabd5c', u'tags': {u'Name': u'Demo'}, u'placement': u'us-east-2c', u'ami_launch_index': u'0', u'dns_name': u'ec2-18-220-168-42.us-east-2.compute.amazonaws.com', u'region': u'us-east-2', u'ebs_optimized': False, u'launch_time': u'2019-04-14T05:32:05.000Z', u'instance_type': u't2.micro', u'state': u'running', u'architecture': u'x86_64', u'hypervisor': u'xen', u'virtualization_type': u'hvm', u'root_device_name': u'/dev/xvda'})

PLAY [Deploy tomcat service] ***************************************************

TASK [Gathering Facts] *********************************************************
fatal: [172.31.33.6]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: Warning: Permanently added '172.31.33.6' (ECDSA) to the list of known hosts.\r\nPermission denied (publickey,gssapi-keyex,gssapi-with-mic).", "unreachable": true}
	to retry, use: --limit @/opt/ansible-demo/devops/ansible/e2eproject/deploy.retry

PLAY RECAP *********************************************************************
172.31.33.6                : ok=0    changed=0    unreachable=1    failed=0   
localhost                  : ok=5    changed=2    unreachable=0    failed=0   

===================================================================================

vi /etc/systemd/system/tomcat.service
Insert the following on line 8 after java
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.211-2.6.17.1.el7_6.x86_64/jre


systemctl daemon-reload
systemctl start tomcat
systemctl status tomcat







