Day 1  "16 feb, 2019"  6000 Installment 


Commands

RPM Install
CD /Folder where RPM exist
# rpm -ivh *.rpm


PEM to PPK

[dharmesh@localhost SSH Key]$ puttygen LinuxKey_SSH.pem -O private -o LinuxKey_SSH.ppk


AWS VMs:

My awsEC2 :  ssh -i "devops.pem" ec2-user@ec2-18-217-103-10.us-east-2.compute.amazonaws.com -y
My awsdemo:  ssh -i "awsdemo.pem" ec2-user@ec2-18-221-196-17.us-east-2.compute.amazonaws.com -y


=================================================
Day 3

gitcommands
.SSH

Password less Authentication

copy rsa from machine1 to machine2 once done
login from machine1 to machine2 via ssh  

First logged in as ROOT

#ssh-keygen -t rsa
#cat /root/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLCr/1tkMeQoUvxQCuNxTS5VdZUqnTv1EPB2JhE8aM9fjrsFAFosji8lP5CeOgKHnMq/W9kYzXVUstNhX1sh5OWblPDc6V0P/fXzW7esfORRxkcBIqy/nF1sei5Xt1YNseEjLUQ66Og82YM/UMTC6ZRcoqbJ8/Drs5T9c+n7MaE0W/X6ZPHrnveBFXvLTpO3JSosHY7EcCoy6/XhZIi7qPQIERHjFRxxPCRCM80rX86InCx0/Gkdu7uylZH89BkxgjXCUZKfew5BS5pm69fZ+ZC4MRQJ7BbQ3QvaftAc8EXCR/YlXWdo73xDXu1AN1Yv71LQI7dfEXHxkzWZmff6NL root@ip-172-31-35-229.us-east-2.compute.internal


login to second VM
#cd /root/.ssh
#vi authorized_keys   (paste publick key here)
wq!





#ssh root@172.31.39.233
ASk for non host confirmation
now prompt chnage to remote host


# cd /root/.ssh/
#ls -lrt
#vi authorized_keys



rpm -qa | grep tree   (Toi check the RPM package)
ls -lrq (Check permission and user)

#Permission commands



=====================================================

GIT Hub

#mkdir -p devops (Create on Linux)

mkdir -p /opt/devops && cd /opt/devops/   # create and chnage directory

Install git
yum install git -y

git init (create default local repository)

create logical area
1.Untracked Area  ---      git add (to Move file to Commit Area)
2.Commit Area  ---         git commit  
3. Repository Area --


#history  (it will show all executed commands)
Now create one text file called linuxcommands and save with vi

#git status  ()

[root@ip-172-31-39-233 devops]# git remote add origin https://github.com/dharmaraiya/devops.git
[root@ip-172-31-39-233 devops]# git	 push -u origin master

Authenticate with GIT Hub account


[root@ip-172-31-39-233 devops]# history | grep git

git add ..
git commit -m "my first commit"
[root@ip-172-31-39-233 devops]# git push -u origin master  or git push -u


To copy or clone from git hub to new machine

Click on clone or download
https://github.com/dharmaraiya/devops.git  copy this link

git clone https://github.com/dharmaraiya/devops.git

===========================================================================================

Day 4   "March 2, 2019"    Installment 4000 

dharmesh@localhost SSH Key]$ ssh -i "devops.pem" ec2-user@ec2-13-59-121-106.us-east-2.compute.amazonaws.com
Last login: Sat Mar  2 03:54:43 2019 from 103.79.101.161

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
6 package(s) needed for security, out of 8 available
Run "sudo yum update" to apply all updates.
This is New shell
This is New Login Shell


[ec2-user@ip-172-31-39-233 ~]$ which bash
/usr/bin/bash


#/opt


[dharmesh@localhost SSH Key]$ echo $?  (0 means successfull , none 0 error)
2

Name: tardemo.sh
#!/bin/bash
filename=homedirbackup_$(date +%Y%m%d).tar.gz
tar -czf $filename /$HOME


tar -xvf
tar -cvf 
tar -tvf 


        Functions :

vi functiondemo.sh
#!/bin/bash

x="global value"

function bashfunction {
    local x="local value"
    echo $x
    }

echo $x

# call the bashfunction
bashfunction

echo $x

vi argumentpassing.sh
 
 #!/bin/bash
    
printfunction () {
   echo Hello $1
   return 0
   }
   
printfunction Hello
   
printfunction "Big data!"


bash argumentpassing.sh


----------Command Line Arguments-------------
vi bashargs.sh

#!/bin/bash
osname=$1
echo $osname
echo `uname -a`

bash bashargs.sh Ubuntu

https://dzone.com/articles/top-20-git-commands-with-examples






===============================================================================================================
Day 5,  Sun 03 Mar 2019 08:24:04 AM IST 

Read Command 
------------------readuser-input.sh------------------------
#!/bin/bash
 
echo -e "Hi, please your name: \c "
read  name
echo "Hello $name !"

------------------------Redirection Error -------------------------------
Name       FD   Description
   stdin    0   standard input stream (e.g. keyboard)
   stdout   1   standard output stream (e.g. monitor)
   stderr   2   standard error output stream (usually also on monitor
   
   vi redirection.sh
     # stdout from bash script to stderr
     echo "Hello! Big Data @ Bash" 1>&2 
     # stderr from bash script to /dev/null
     # Note that there's no command called 'dates'

     dates 2>&1  // This will display errors
     dates 2>/dev/null // This will not display errors

     # stderr and stdout to file
     dates &> outfile.txt

-------------------------------------------------------------------------
    
 Bash conditional statements

Operator    Description
-eq         Equal to
-ne         Not equal to
-gt         Greater than
-ge         Greater than OR equal to
-lt         less than
-le         less than OR equal to

     vi bash-ifelse.sh
       #!/bin/bash

       total=${1}
       if [ $total -eq 1 ]; then
         echo "the number is equal to 1"
       else
         echo "the number is NOT equal to 1"
       fi
    
    bash bash-ifelse.sh


-------------------------------------------------------------------------


Bash file test operators

File Test   Operator Description
-e           File exists (this could be regular file, directory, block device, character device, etc.,)
-f           It’s a regular file (for example: /etc/shadow)
-d           It’s a directory (for example: /var)
-b           It’s a block device (for example:/dev/sdb)
-c           It’s a character device (for example:/dev/tty2)
-s           File is not empty
-r           File read permission
-w           File write permission
-x           File execute permission
-u           suid set on the file
-g           sgid set on the file
-k           Sticky bit set on the file
-p           It’s a pipe
-S           It’s a socket
-h           It’s a symbolic link
-t           Checks whether the given FD is opened in a terminal.
-O           You own the file
-G           File group id and my group id are the same.
-N           Did the file got modified since last read?
file-a -nt file-b   file-a is newer than file-b
file-a -ot file-b   File1 is older than file2
file-a -ef file-b   Both file1 and file2 are hard linked to the same file




#!/bin/bash

directory=$1

# bash check if directory exists
if [ -d $directory ]; then
    echo "Directory exists!"
else 
    echo "Directory does not exists!"
fi


How to test:

[root@ip-172-31-39-233 shellscripting]# bash test-operators.sh ./
Directory exists!
[root@ip-172-31-39-233 shellscripting]# bash test-operators.sh /dharma
Directory does not exists!



--------------Case Statement-------------------
vi bash-case.sh

#!/bin/bash
echo "What is your scripting language? (0 = EXIT)"
echo "1) bash"
echo "2) perl"
echo "3) phyton"
echo "4) None of the above !"
read case;

case $case in
    1) echo "You've selected bash!";;       #;; end and exit
    2) echo "You've selected perl!";;
    3) echo "You've selected phyton!";;
    0) exit
esac

bash bash-case.sh


--------------Bash for loop------------------------------
Bash `loop` statements

For loops allow repeated execution of a command sequence based on an iteration variable. Bash supports two kinds of for loop, a “list of values” and a “traditional” c-like method.

for varname in list
do
    commands 
done

Note that

1.  Bash for, in, do and done are keywords

2.  list contains a list of items, which can be in the statement or fetched from a variable that contains several words separated by spaces.

3.If list is missing from the for statement, then bash uses positional parameters that were passed into the shell.

Example:

vi bash-for-loop.sh

#!/bin/bash
i=1
for day in Mon Tue Wed Thu Fri  #day is variable
do
echo "$(( i++ )) : $day"   #++ is increament value
done


bash bash-for-loop.sh

Question : why its giving output in seperate line not is single line?
Ans : because we are using echo, we should use seperate variable for i++ to output in single line

Example :
echo -e "$(( i++ )) : $day \c"   
#++ is increament value -e for sameline \c to stop carry forward



----------------c-style-loop-------------------------------
#!/bin/bash

for (( i=1; i <= 3; i++ ))
do
    echo "Your random number $i: $RANDOM"
done



------------- while loop-------------------------------
Bash while loop:

while expression
do
    commands
done


Note that

1. while, do, done are keywords
2. Expression is any expression which returns a scalar value
3. Commands between do and done are executed while the provided conditional expression is true

vi bash-whileloop.sh

#!/bin/bash

# This script prints 4 sequential numbers 0 1 2 3.

x="0"

while [ $x -lt 4 ]
do
    x=$[$x+1]
    echo $x
done


bash bash-whileloop.sh



------------------------Complex example of bash-------------------------
#!/bin/bash
 
select=0

echo "1. Apple"
echo "2. Oragne"
echo "3. Lime"

echo -n "Please select [1,2 or 3] : "

# Loop while the variable 'select' is equal 0
# bash while loop

while [ $select -eq 0 ]; do
 
# read user input
read select

# bash nested if/else
if [ $select -eq 1 ] ; then
 
        echo "You have selected: Apple"

else                   

        if [ $select -eq 2 ] ; then
                 echo "You have selected: Orange"
        else
         
                if [ $select -eq 3 ] ; then
                        echo "You have selected: Lime"
                else
                        echo "Please select between 1-3 !"
                        echo "1. Apple"
                        echo "2. Ornage"
                        echo "3. Lime"
                        echo -n "Please select [1,2 or 3] : "
                        choice=0
                fi   
        fi
fi
done


Example output :
[root@ip-172-31-39-233 shellscripting]# bash complexscript.sh 
1. Apple
2. Oragne
3. Lime
Please select [1,2 or 3] : 2
You have selected: Orange
[root@ip-172-31-39-233 shellscripting]# bash complexscript.sh 
1. Apple
2. Oragne
3. Lime
Please select [1,2 or 3] : 0
Please select between 1-3 !
1. Apple
2. Ornage
3. Lime






------------------------------------------------

head unirank.csv
  head -n 25 unirank.csv
  apt install python3-csvkit
  head  unirank.csv | csvlook
  head -n 25 unirank.csv | csvlook
  grep -i "college" unirank.csv | csvlook
  wc -l unirank.csv
  grep -i "college" unirank.csv | wc -l
  grep "CA" unirank.csv | csvlook





===========================================================================================



 cat unirank.csv | cut -f4,6 -d, > udata.csv
 sudo pip install bashplotlib
 cat udata.csv| tail -n +2 | scatter


-----------------------------------------------------------

[root@ip-172-31-39-233 ssh]# pwd
/etc/ssh

[root@ip-172-31-39-233 ssh]# vi sshd_config

press / and search Password
go to vi and remove comment passwordless authentication

PasswordAuthentication yes
#PermitEmptyPasswords no
#PasswordAuthentication no

PermitRootLogin yes

For ubuntu : PermitRootLogin prohibitpassword  (remove this section and mark as yes in lower case)

Now save


[root@ip-172-31-39-233 ssh]# service sshd restart    #Because we have made chnage in SSHD 

[root@ip-172-31-39-233 ssh]# passwd

ssh root@ec2-18-188-55-156.us-east-2.compute.amazonaws.com  (Now we can directly ssh root without Pem file to AWS)


Difference between below:

[dharmesh@localhost ~]$ cd ..
[dharmesh@localhost home]$ ls
dharmesh
[dharmesh@localhost home]$ cd ..
[dharmesh@localhost /]$ ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  SSH Key  sys  tmp  usr  var
[dharmesh@localhost /]$ 




scp *.* root@172.31.24.210:/opt/Devopsmaterials/shellscripting  ---  IP should be private key , All files copy
scp unirank.sh root@172.31.24.210:/tmp ---- One file copy

 
==============================================================================


 cat unirank.csv | cut -f4,6 -d, > udata.csv
 sudo pip install bashplotlib
 cat udata.csv| tail -n +2 | scatter
 
 
 ------------------runevery-where.sh-----------------------
#!/bin/bash

# A list of servers, one per line.
SERVER_LIST='/vagrant/servers'

# Options for the ssh command.
SSH_OPTIONS='-o ConnectTimeout=2'

usage() {
  # Display the usage and exit.
  echo "Usage: ${0} [-nsv] [-f FILE] COMMAND" >&2
  echo 'Executes COMMAND as a single command on every server.' >&2
  echo "  -f FILE  Use FILE for the list of servers. Default: ${SERVER_LIST}." >&2
  echo '  -n       Dry run mode. Display the COMMAND that would have been executed and exit.' >&2
  echo '  -s       Execute the COMMAND using sudo on the remote server.' >&2
  echo '  -v       Verbose mode. Displays the server name before executing COMMAND.' >&2
  exit 1
}

# Make sure the script is not being executed with superuser privileges.
#if [[ "${UID}" -eq 0 ]]
#then
  #echo 'Do not execute this script as root. Use the -s option instead.' >&2
  #usage
#fi

# Parse the options.
while getopts f:nsv OPTION
do
  case ${OPTION} in
    f) SERVER_LIST="${OPTARG}" ;;
    n) DRY_RUN='true' ;;
    s) SUDO='sudo' ;;
    v) VERBOSE='true' ;;
    ?) usage ;;
  esac
done

# Remove the options while leaving the remaining arguments.
shift "$(( OPTIND - 1 ))"

# If the user doesn't supply at least one argument, give them help.
if [[ "${#}" -lt 1 ]]
then
  usage
fi

# Anything that remains on the command line is to be treated as a single command.
COMMAND="${@}"

# Make sure the SERVER_LIST file exists.
if [[ ! -e "${SERVER_LIST}" ]]
then
  echo "Cannot open server list file ${SERVER_LIST}." >&2
  exit 1
fi

# Expect the best, prepare for the worst.
EXIT_STATUS='0'

# Loop through the SERVER_LIST
for SERVER in $(cat ${SERVER_LIST})
do
  if [[ "${VERBOSE}" = 'true' ]]
  then
    echo "${SERVER}"
  fi

  SSH_COMMAND="ssh ${SSH_OPTIONS} ${SERVER} ${SUDO} ${COMMAND}"
 
  # If it's a dry run, don't execute anything, just echo it.
  if [[ "${DRY_RUN}" = 'true' ]]
  then
    echo "DRY RUN: ${SSH_COMMAND}"
  else
    ${SSH_COMMAND}
    SSH_EXIT_STATUS="${?}"

    # Capture any non-zero exit status from the SSH_COMMAND and report to the user.
    if [[ "${SSH_EXIT_STATUS}" -ne 0 ]]
    then
      EXIT_STATUS=${SSH_EXIT_STATUS}
      echo "Execution on ${SERVER} failed." >&2
    fi 
  fi
done

exit ${EXIT_STATUS}

 



========================================================================================================

Get password less authentication to remote machine to Run scripts

we can restart sshd services if required

Adding hostnames to hostfile for password less login for script
 
echo 10.9.8.11 server01 | sudo tee -a /etc/hosts   #Private IP, it will add host name of first machine to currunt machine. Hostname should be anything as Alias

ssh root@AWS-Demo uptime



vi /opt/servers   #Here add hostname of the server as Alias

; seperator


for SERVERS in $(cat /opt/servers); do  ssh ${SERVERS} hostname;  ssh ${SERVERS} uptime; done



------------Ping Script---------------------
 #!/bin/bash

#This Script will ping list of servers and list the status

SERVER_FILE="/opt/servers"

if [[ ! -e "${SERVER_FILE}" ]]
then
  echo "Can not Open ${SERVER_FILE}." >&2
  exit 1
fi

for SERVER in $(cat ${SERVER_FILE})
do
  echo "Pinging ${SERVER}"
  ping -c 1 ${SERVER} &> /dev/null
  if [[ "${?}" -ne 0 ]]
  then 
    echo "${SERVER} is down."
  else
    echo "${SERVER} up"
  fi
done  

=========================================================================================================

--------------------Script Testing-------------------------------
 
   ./run-everywhere.sh -ns hostname
  ./run-everywhere.sh -v uptime
  ./run-everywhere.sh -ns id
  ./run-everywhere.sh -sv id
  ./run-everywhere.sh -f test hostname
  ./run-everywhere.sh -f /path/to/nowhere hostname
  ./run-everywhere.sh -s useradd test1
  ./run-everywhere.sh id test1
  echo "'Test two'"
  echo '"Test two"'
  ./run-everywhere.sh -ns 'useradd -c "Test two" test2'
  ./run-everywhere.sh -s 'useradd -c "Test two" test2'
  ./run-everywhere.sh id test2
  ./run-everywhere.sh -v id test2
  ./run-everywhere.sh -v tail -2 /etc/passwd
  ./run-everywhere.sh i-like-pizza
  echo $?


======================================================================================

---------------- Apache Install-----------------------------------

#!/bin/bash

# This script installs the apache web server on the given host.
# This script assumes the user running it has sudo privs on the remote host.

usage() {
  # Display the usage and exit.
  echo "Usage: ${0} HOST [HOSTN...]" >&2
  exit 1
}

# Make sure the script is not being executed with superuser privileges.
#if [[ "${UID}" -eq 0 ]]
#then
  #echo 'Do not execute this script as root.' >&2
  #usage
#fi

# If the user doesn't supply at least one argument, give them help.
if [[ "${#}" -lt 1 ]]
then
  usage
fi

# Expect the best, prepare for the worst.
EXIT_STATUS='0'

# Loop through the provided servers.
for SERVER in "${@}"
do
  echo "Starting installation process on: ${SERVER}"

  # Ping the server to make sure it's up.
  ping -c 1 ${SERVER} &> /dev/null

  if [[ "${?}" -ne 0 ]]
  then
    echo "${SERVER} down."
    EXIT_STATUS='1'
    continue
  fi

  # Install the httpd package
  ssh ${SERVER} sudo yum install -y httpd

  # Create an index.html file.
  ssh ${SERVER} 'echo "${HOSTNAME}" | sudo tee /var/www/html/index.html >/dev/null'

  # Start httpd
  ssh ${SERVER} sudo systemctl start httpd

  # Enable httpd
  ssh ${SERVER} sudo systemctl enable httpd

  # Test that the web server is accessible.
  curl http://${SERVER}

  if [[ "${?}" -ne 0 ]]
  then
    echo "Could not access the web server on ${SERVER}." >&2
    EXIT_STATUS='1'
    continue
  fi

  echo "Finished installation process on: ${SERVER}"
done

exit ${EXIT_STATUS}






curl -o /dev/null -s -w "%{http_code}\n" http://localhost

===================================================================================
Learn Curl ?

[root@ip-172-31-35-229 opt]# bash apacheinstall.sh
Usage: apacheinstall.sh HOST [HOSTN...]
[root@ip-172-31-35-229 opt]# bash apacheinstall.sh devops
Starting installation process on: devops
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
Package httpd-2.4.37-1.amzn2.0.1.x86_64 already installed and latest version
Nothing to do
ip-172-31-39-233.us-east-2.compute.internal
Finished installation process on: devops
[root@ip-172-31-35-229 opt]# curl http://172.31.39.233
ip-172-31-39-233.us-east-2.compute.internal


===========================================================


#!/bin/bash

# This script displays the PIDs and count of matching processes.

PROC_NAME="${1}"
server_name=${2}
PIDS=$(ssh ${server_name} pidof ${PROC_NAME})
COUNT=$(echo $PIDS | wc -w)

if [[ "${COUNT}" -gt 0 ]]
then
  echo "PROCESS NAME: ${PROC_NAME}"
  echo "COUNT: ${COUNT}"
  echo "PID(S): ${PIDS}"
else
  echo "No processes named ${PROC_NAME} found." >&2
  exit 1
fi
 

===========================













































	
